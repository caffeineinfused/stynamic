CSCI 5800 - Cybersecurity Programming Project Spring 2017
Anthony, Zack, Cory

About:
Stynamic detects potential code vulnerabilities in C++ code and provides references to the potentially vulnerable code through Static (using the Flawfinder tool) and Dynamic analysis (using the Valgrind tool). As most tools utilize only Static or Dynamic analysis, Stynamic allows for a very simple interface that provides a more complete picture of the potentially vulnerable code. Output can be specified as Quiet, -q flag, (minimum amount of output, avoids many potential false-positives), Default, -d flag (medium amount of output), or Verbose, -v flag (maximum amount of output).


Setup:
There are two options that can be made to run stynamic.

If internet connection is available, follow directions for option 1, otherwise follow directions for option 2.

Option 1:
Before running program in a Kali environment, run the following on the command line:
   $ sudo apt-get install flawfinder
   $ sudo apt-get install valgrind

Option 2:
Before running stynamic, to install the required packages, run the following commands from inside the stynamic package:
   $ sudo ./SetUp


Usage:
***Program to be tested must be compiled with gcc using the -g flag***

We have included the ./testFiles directory that includes ValTest.c that was previously compiled with gcc using the -g flag to the binary ValTester to give an example of tool usage and output.

Sample usage could be:
   $ ./Stynamic.py -v -f ./testFiles/ValTest.c -b ./testFiles/ValTester (this will run Stynamic with verbose output on ValTest.c)

   $ ./Stynamic.py -q -f ./testFiles/ValTest.c (this will run Stynamic with only static analysis since no binary was included, with quiet output on ValTest.c)

   $ ./Stynamic.py -d -a *.c (This will run Stynamic on all .c files, recursively, with default output)

   $ ./Stynamic.py --help (This will print the help opetions, listed below)


Help:
usage: Stynamic [-h] [-q | -d | -v] [-b binary] [-ba binary arguments]
                [-a pattern [pattern ...]] [-f file [file ...]]

Code vulnerability detection program that gets output from Static (from
Flawfinder) and Dynamic (from Valgrind) code analysis of C++ code. Requires
executeable code compiled with gcc using the -g flag for complete results.

optional arguments:
  -h, --help            show this help message and exit
  -q                    Quiet level of output (Minimum) - exclusive from other
                        output levels
  -d                    Default level of output (Medium) - exclusive from
                        other output levels
  -v                    Verbose level of output (Maximum) - exclusive from
                        other other levels

  -b binary             Specify binary location for running with Stynamic
  -ba binary arguments  If binary requires arguments specify here

  -a pattern [pattern ...]
                        Have Stynamic automatically determine source file list
                        from the provided pattern(s)
  -f file [file ...]    Specify file(s) for Stynamic to check


Reference to Previous Work:
We use the existing open source tools of Flawfinder [1] and Valgrind [2] as our Static and Dynamic C++ Code Vulnerability Detection tools respectively by creating wrappers for each program, FlawFndr.py and ValgWrapper.py. The insight into the need for a combination of tool types and the state of current code vulnerability detection is from the following resources [3] - [7].

1. Wheeler, David. Work in Progress, “Flawfinder” https://www.dwheeler.com/flawfinder/, Accessed April 22, 2017
2. Valgrind Developers, Work in Progress “Valgrind” http://valgrind.org/, 2000, Accessed April 22, 2017
3. Yamaguchi, Fabian, Christian Wressnegger, Hugo Gascon, and Konrad Rieck. "Chucky: Exposing missing checks in source code for vulnerability discovery." In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, ACM, pg. 499-510. 2013.
4. Assal, Hala, Sonia Chiasson, and Robert Biddle. "Cesar: Visual representation of source code vulnerabilities." In Visualization for Cyber Security (VizSec), 2016 IEEE Symposium on, IEEE, pp. 1-8, 2016.
5. Wikipedia. work in progress “Memory Debugging.” https://en.wikipedia.org/wiki/Memory_debugger Accessed on March 28, 2017.
6. Rains, Tim. Work in progress. “Microsoft’s Free Security Tools - banned.h” https://blogs.microsoft.com/microsoftsecure/2012/08/30/microsofts-free-security-tools-banned-h/ . 2012. Accessed on March 29, 2017.
7. Sutton, Michael, Adam Greene, and Pedram Amini. Fuzzing: brute force vulnerability discovery. Pearson Education, 2007.
